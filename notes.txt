LAWLESS:

midrc lawless branches(n) = {odd n: (n-1)(2n-1), else: 2(n-1)(4n-5)
midrc_branches = lambda n: (n-1)*(2*n-1) if n%2 else 2*(n-1)*(4*n-5)

edges/rings(1) lawless branches = https://oeis.org/A014635 but offset so a(1)=0
edges_branches = lambda n: 2*(n-1)*(4*(n-1)-1)

edges ~ even N midrc: each point has 8-orbit except edges' 4*1 corners and midrc's 2x2 centroid
this relation does not imply equal branches if Queens-legal branching

midrc has two sequences where the "base" is the evens, and then the odds replace
 branches(n) = {odd n: (n-1)(2n-1), even n: 2(n-1)(4n-5)
0 6 10 66 36 190 78 378 136 630 210 946 300 1326 406
 odd N = 2(n-2)(4(n-2)+1)   (https://oeis.org/A033585 offset from 0 to 1)
0   10    36     78     136     210     300      406
even N = 2n(4n-1)           (https://oeis.org/A014635 offset from 0 to 1)
- 6 -- 66 -- 190 -- 378 --- 630 --- 946 --- 1326 ---
(dropped so can see where odd replaces even)


LAWFUL/LEGAL:

lawless (ignoring Queens-legal) is clearly the upperbound

midrc odds gets perfect 8 because the only point with a 1-orbit (ie. less than an 8-orbit), the midpoint, is precluded by Queens no matter what (since it would need a second column/row, and there's none because it's the odd N case), so all others have 8 symmetry and therefore it's a perfect 8 quotient

       N | 1 2 3 4  5   6   7   8   9    10   11   12   13   14   15   16   17   18   19   20   21   22    ...
   midrc | 0 0 0 28 8   96  24  204 48   360  80   564  120  816  168  1116 224  1464 288  1860 360  2304 
rings(1) | 0 0 8 28 60  104 160 228 308  400  504  620  748  888  1040 1204 1380 1568 1768 1980 2204 2440
rings(2) | 0 0 8 52 132 292 476 748 1044 1428 1836 2332 2852 3460 4092 4812 5556 6388 7244 8188 9156 10212

midrc is split into odd/even N subsequences again
midrc odds branches(N) = https://oeis.org/A033996 a(N//2-1), evens = https://oeis.org/A033580 - https://oeis.org/A051062 so a1(N-2) - a2(N-2)  (N=4 28-0=28, N=6 104-8=96, N=8 228-24=204, etc)
rings(1) branches(N) = https://oeis.org/A033580 a(N-2)
rings(2) will be harder and mostly for the sake of completion since it more closely represents what they were doing for Q27 (we don't consider it based on the "internal" placement "S-orbits" as they do)


midrc branches(n) = {odd n: (n-3)*(n-1), else: max(2*(n-2)*(3*n-5) - max(8*n-40, 0), 0)
rings(1) branches(n) = {n<=1: 0, else: 2*(n-2)*(3*n-5)

todo: consider derived "S-orbits"?
