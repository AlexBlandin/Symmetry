
SB(odd N) = { {(a,m), (m,b)} | a in 1..m-2, b in a+1..m-1 } U { {(m,m)} } given m=(N-1)/2  (int m as odd N)

as nested loops

for a in 1 ... mid (exclusive)
  for b in a+1 ... mid (exclusive)
    branch = {(a, mid), (mid, b)} # always has 8-orbit
    include(branch)
branch = {(mid, mid)} # handle 1-orbit case separately
include(branch)

this gives an "outer" Queen and an "inner" Queen for the branch (since for odd N they cannot be the same distance from the midpoint)
since it is constructed this way, the outer constrains the inner, and it thus generates all legal branches except the midpoint itself (which we include by union)
the 8-way symmetry can be observed in that we generate the outer Queen on the left half and the inner Queens on the upper half, and so we can follow the rotations around as clearly 4-way and then mirror the branch by anti-diagonal symmetry and rotate again for the remaining 4-ways (as we can see by clockwise rotation then either the outer or inner Queen is "leading" in the rotation and is always the one leading unless we mirror the two, wherein the other now leads)

for even N the argument is as follows
we have a diagonal "scanline" from which we select our first Queen, this now defines the orbit-pattern we are constrained to (a "flat-tip diamond" of squares a certain distance from the edge), we now have a second, nested, scanline that continues to select the second Queen, both the first and second scanlines continue until they are adjacent to an intersection, the third and fourth Queens are picked by two further nested scanlines that carries on until they scan to the edge of the orbit-pattern defined by the first Queen, with the fourth scanline being ignored iff the third Queen is on an intersection
??? does this require something to handle symmetry across the scanline?
the first Queen can be simplified to just use the upper-most row from the scanline. second onwards must use all other legal squares on the scanlines for to do what we want
so, the multiplicities are as such: 4 and 2 orbits have their fixed windmill patterns (the 2 orbits is where they're all on the orbital pattern, ie are all a distance d from the edge, the 4 orbits are where the rows are a distance d1 from the edge and the columns a distance d2 from the edge (with a dual where the columns are flipped horizontally and the rows are not))
ALL ELSE HAS AN 8 ORBIT, INTERSECTION OR NO (makes sense because whilst intersection only has 4 points to move into the other two have 8, so it must still be 8 overall)
scanlines work as a nice image, the maths is then equivalent to being no less than equidistant from the edge as the first Queen (further is towards intersection, as intended) 
coord are in 1..N, so opposite to ord a in coord (a,b) is N-a+1, so that gives bounds
scanlines are in 2..2N, so for scanline a+b then opposite is 2N-(a+b)+2, bounds scanline
trying to get it to construct linearly (rather than rely on set and deduplication) is the hard part (or knowing that it'll do it properly)
there's either two or three spots on a scanline (discounting first Queen's row, otherwise there are 4 maximum) so we can either loop within the scanline or handle as a more complex loop when specifically constructing the branch?


{a',b',c'} U {d' if c' not in I}
  1+N/2 <= a < N
    a < b < 2N-a+2
      b < c < 2N-a+2
        c < d < 2N-a+2 if b' and c' not in I
where a,b,c,d in 2..2N,
      ' is the function scanline->coordinate (a+b scanline, coord infers column/row), and
      I is the set of intersection squares


quotient is asymptotically 8 as we have a polynomial number of 8-orbits vs a constant number of 1-orbit or a linear number of 4-orbits
and letting wa solve for the limit also gives 8
https://www.wolframalpha.com/input/?i=limit+of+n+to+infinity+for+%28%28n-1%29%28n-3%29%2B1%29%2F%28%28n-1%29%28n-3%29%2F8%2B1%29
https://www.wolframalpha.com/input/?i=limit+of+n+to+infinity+for+%286n%5E2+-+30n+%2B+44%29%2F%28n%283n-14%29%2F4+%2B+5%29

quotient(N) = (N%2)((N-1)(N-3)+1)/((N-1)(N-3)/8+1) + (1-(N%2))(6N^2 - 30N + 44)/(N(3N-14)/4 + 5)
https://www.wolframalpha.com/input/?i=%28n%252%29%28%28n-1%29%28n-3%29%2B1%29%2F%28%28n-1%29%28n-3%29%2F8%2B1%29+%2B+%281-%28n%252%29%29%286n%5E2+-+30n+%2B+44%29%2F%28n%283n-14%29%2F4+%2B+5%29

ODD N:

branches(odd N) = (N-1)(N-3) + 1

|sb(odd N)| = (N-1)(N-3)/8 + 1

we derive the branches formula from the (N-1)*(N-1) product of the row*col (discounting the midpoint for -1), with then, assuming we are picking from the column, discounting for the two diagonally attacking Queens on the row (so N-1-2=N-3), and then adding the central square as it cannot pair with any others in this case but must be included as a valid branch

  A
  B
ab#ba
  B
  A

   A
   B
   C
abc#cba
   C
   B
   A

here we see the nested diamonds pattern (so each branch is a pair of two different size diamonds, which is why we always get full 8-orbits) and isolated central square

we derive the reduced formula from the number of 8-orbits / 8 (since 8-orbits have 1 fundamental branch in each 8 branches including itself) plus the midpoint 1-orbit (so only 1)



EVEN N:

oeis superseeker guessed from even N 8..20:
sb(n=N-7 (so N=8->n=1)) = a(n) = 2n^4 + 2n^3 + 11n^2 + 6n + 9.
ofsetting so they're on the evens (n=N/2-3) gives
|sb(even N)| = (N^4 - 22N^3 + 202N^2 - 888N + 1584)/8
which matches maxima's (N^4-22*N^3+202*N^2-888*N+1584)/8
The next few terms are 9977, 15534, 23169.
as calculated:
22 | 9977
24 | 15534
26 | 23169
so okay, we have a simple polynomial for the evens>8, though it becomes more complex through the lens of the board itself


branches(even N) = 2(N-6)(3N-13) + 4(6N-22) + 4(2N-6)  for N >= 3
                 = 6N^2 - 30N + 44

branches(even N) = 2(N-2)(3N-5) - max(0, 8N-24)  for N >= 0
                 = 2(N-2)(3N-5) - 4N*sign(8N - 24) + 12*sign(8N - 24) - 4N + 12
                 = 6N^2 - 22N + 20 - 4N*sign(8N - 24) + 12*sign(8N - 24) - 4N + 12
                 = 6N^2 - 4N*sign(8N - 24) + 12*sign(8N - 24) - 26N + 32

equivalent in general if you remove the max(), as seen here:
                 = 2(N-2)(3N-5) - 8N + 24   (the below one expanded to remove the max())
                 = 6N^2 - 22N + 20 - 8N + 24
                 = 6N^2 - 30N + 44

so we have an intuitive formula if targeting the 8-orbits accounting for the (n-2)/2 4-orbits

reduced(even N) = ((N-6)(3N-13) + 2(6N-22) + 2(2N-6) + (N-2))/4  for N >= 3
                = ((N-6)(3N-13) + (N-2))/4 + 4N-14
                = N(3N-14)/4 + 5

squares form a 2x2 centroid (0s) and 1..8 limbs (a limb being a row/column between the edge of the board and the 2x2 centroid)

  12
  12
880033
770044
  65
  65

tracing out the diagonals

   AB
   BA
 ab##ab
 ba##ba
   AB
   BA

   AB
   BA
   AB
aba##bab
bab##aba
   BA
   AB
   BA

here we see the repeating patterns but they're not as clean as the odds (obviously)

without accounting for the 4-orbits, we can start to put together a nice and intuitive formula
8(n-5+n-4+n-3) + 8(n-4+n-4+n-3) + 4(n-3+n-3) + 4(n-6)(n-5+n-4+n-4)
= 8(3n-12) + 8(3n-11) + 4(2n-6) + 4(n-6)(3n-13)

first term is "caps" (the square of a limb that is also on the outermost edge of the board), for 8 caps (n-4+n-4+n-1), -2 diagonal elims on uppermost row, -1 diag. -1 horiz. on adjacent column, -1 diagonal on lowermost row (since other diag doesn't intersect)

second term is the "roots" (the square of the limb directly adjacent to the centroid), for 8 roots (n-4+n-3+n-4), -1 diag. -1 horiz. on adjacent column, -2 diag. on lowermost row, -1 diag. on uppermost row as other diag. intersects centroid which was already discounted

third term is the 2x2 centroid, for each square (n-3+n-3) as it eliminates a row and column and then by diagonal eliminates another square in the centroid and then a root square

fourth term is the remaining squares, for each is (n-5+n-4+n-4), additional -2s on all since has diagonal eliminations on all others and -1 on adjacent column for horizontal elim too


8(6n-22) + 4(2n-6) + 4(n-6)(3n-13)
we join the caps and roots terms into 8(6n-23) and account for the cap-root pair to get 8(6n-22), which simplifies things but also lets us handle the 4-orbits all at once

now we can handle the 4-orbits by just halving the limbs (since each square in a limb paired with its half-rotation gives the 4-orbit pattern, which we did not account for earlier, and by halving we take care of the pair generated by starting with that half-rotation square and doing another half-rotation back to the original square) and get:
n -> 4(6n-22) + 4(2n-6) + 2(n-6)(3n-13)
this is the correct formula for all N >= 3 (since N < 3 is the special case 0 for even N)


4(6n-22) + 4(2n-6) + 2(n-6)(3n-13) + 4(n-2)/2
to derive the formula for the fundamental we are going to add in additional factors for the 4-orbit
(4(6n-22) + 4(2n-6) + 2(n-6)(3n-13) + 4(n-2)/2)/8
since we've now transformed the 4-orbits such that we can divide the entire formula by 8 and the 4-orbits contribute a full fundamental solution each
(2(6n-22) + 2(2n-6) + (n-6)(3n-13) + (n-2))/4

which we can simplify to:
= ((n-6)(3n-13) + (n-2))/4 + 4n-14
= n(3n-14)/4 + 5
which is very nice and concise, and so while there is might be a way to think about it that gives this directly, this is already sufficient, perhaps left as an exercise for the reader


to understand the 4-orbits, and how the even N's fundamental 4-orbits contribute 0,0,1,2,3,4,5,6,7,8,9,10,... to reduced(even N) (N=0 and N=2 having 0 is absence)
the formula for fundamental 4-orbits is (n-2)/2, which we derive from (n-2) as they cannot be centroid squares then /2 as 180 rotation is identity, thus 4-orbit
these fundamental 4-orbits are pictured below, and give quite a clear pattern

() N=0

-- N=2
--

---- N=4
---#
#---
----

------ ------ N=6
------ ------
----#- -----#
-#---- #-----
------ ------
------ ------

-------- -------- -------- N=8
-------- -------- --------
-------- -------- --------
-----#-- ------#- -------#
--#----- -#------ #-------
-------- -------- --------
-------- -------- --------
-------- -------- --------

---------- ---------- ---------- ---------- N=10
---------- ---------- ---------- ----------
---------- ---------- ---------- ----------
---------- ---------- ---------- ----------
------#--- -------#-- --------#- ---------#
---#------ --#------- -#-------- #---------
---------- ---------- ---------- ----------
---------- ---------- ---------- ----------
---------- ---------- ---------- ----------
---------- ---------- ---------- ----------
